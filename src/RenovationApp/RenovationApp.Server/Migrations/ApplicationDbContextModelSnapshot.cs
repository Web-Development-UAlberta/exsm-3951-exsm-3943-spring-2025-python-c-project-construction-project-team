// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RenovationApp.Server.Data;

#nullable disable

namespace RenovationApp.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ClientInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid");

                    b.Property<string>("PaymentInstructions")
                        .HasColumnType("text")
                        .HasColumnName("payment_instructions");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ClientInvoices");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("client_id");

                    b.Property<string>("CreatedByEmployee")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by_employee");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<decimal?>("QuotePriceOverride")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("quote_price_override");

                    b.Property<DateTime?>("QuoteScheduleEndOverride")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("quote_schedule_end_override");

                    b.Property<DateTime?>("QuoteScheduleStartOverride")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("quote_schedule_start_override");

                    b.Property<int?>("RFQId")
                        .HasColumnType("int")
                        .HasColumnName("rfq_id");

                    b.Property<string>("RenovationType")
                        .HasColumnType("text")
                        .HasColumnName("renovation_type");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("RFQId")
                        .IsUnique();

                    b.ToTable("Projects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 15000.00m,
                            RenovationType = "KitchenRemodels"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 9800.50m,
                            RenovationType = "BathroomRenovations"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 20000.00m,
                            RenovationType = "BasementFinishing"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 45000.00m,
                            RenovationType = "HomeAdditions"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 12300.00m,
                            RenovationType = "KitchenRemodels"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 8700.75m,
                            RenovationType = "BathroomRenovations"
                        },
                        new
                        {
                            Id = 7,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 17450.20m,
                            RenovationType = "BasementFinishing"
                        },
                        new
                        {
                            Id = 8,
                            ClientId = "2025-05-19T17:37:40.401185Z",
                            CreatedByEmployee = "2caf9d13-45db-4960-8a81-a4ffb48dc8f3",
                            CreatedTimestamp = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPublic = true,
                            QuotePriceOverride = 39999.99m,
                            RenovationType = "HomeAdditions"
                        });
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedByEmployee")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by_employee");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectComments");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCommunications");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_uri");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UploadedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectRenovationTag", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RenovationTagsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProjectId", "RenovationTagsId");

                    b.HasIndex("RenovationTagsId");

                    b.ToTable("ProjectRenovationTags", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            RenovationTagsId = "Modern"
                        },
                        new
                        {
                            ProjectId = 2,
                            RenovationTagsId = "Modern"
                        },
                        new
                        {
                            ProjectId = 2,
                            RenovationTagsId = "Rustic"
                        },
                        new
                        {
                            ProjectId = 3,
                            RenovationTagsId = "Rustic"
                        },
                        new
                        {
                            ProjectId = 3,
                            RenovationTagsId = "Sophisticated"
                        },
                        new
                        {
                            ProjectId = 4,
                            RenovationTagsId = "Modern"
                        },
                        new
                        {
                            ProjectId = 4,
                            RenovationTagsId = "Sophisticated"
                        },
                        new
                        {
                            ProjectId = 5,
                            RenovationTagsId = "Rustic"
                        },
                        new
                        {
                            ProjectId = 6,
                            RenovationTagsId = "Modern"
                        },
                        new
                        {
                            ProjectId = 6,
                            RenovationTagsId = "Rustic"
                        },
                        new
                        {
                            ProjectId = 6,
                            RenovationTagsId = "Sophisticated"
                        },
                        new
                        {
                            ProjectId = 7,
                            RenovationTagsId = "Sophisticated"
                        },
                        new
                        {
                            ProjectId = 8,
                            RenovationTagsId = "Modern"
                        },
                        new
                        {
                            ProjectId = 8,
                            RenovationTagsId = "Rustic"
                        });
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date_actual");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date_actual");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("ProjectServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("project_service_type_id");

                    b.Property<decimal?>("QuoteCost")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("cost_quote");

                    b.Property<DateTime>("QuoteEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date_quote");

                    b.Property<decimal?>("QuotePrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price_quote");

                    b.Property<DateTime>("QuoteStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date_quote");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectServiceTypeId");

                    b.ToTable("ProjectServices", (string)null);
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectServiceInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_at");

                    b.Property<int>("ProjectServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectServiceId");

                    b.ToTable("ProjectServiceInvoices");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ProjectServiceTypes");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.RFQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedEmployeeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("assigned_employee_id");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("budget");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PreferredMaterial")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("ProjectAddress")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("RenovationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("renovation_type");

                    b.Property<string>("RoomSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("RFQs", (string)null);
                });

            modelBuilder.Entity("RenovationApp.Server.Models.RFQImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RFQId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RFQId");

                    b.ToTable("RFQImages");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.RenovationTag", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("RenovationTags");

                    b.HasData(
                        new
                        {
                            Id = "Modern"
                        },
                        new
                        {
                            Id = "Rustic"
                        },
                        new
                        {
                            Id = "Sophisticated"
                        });
                });

            modelBuilder.Entity("RenovationApp.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<Guid>("AuthenticationOid")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_timestamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RenovationApp.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ClientInvoice", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.Project", "Project")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.Project", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.RFQ", "RFQ")
                        .WithOne("Project")
                        .HasForeignKey("RenovationApp.Server.Models.Project", "RFQId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RFQ");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectComment", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.Project", "Project")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectCommunication", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.Project", "Project")
                        .WithMany("Communications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectFile", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.Project", "Project")
                        .WithMany("Files")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectRenovationTag", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RenovationApp.Server.Models.RenovationTag", null)
                        .WithMany()
                        .HasForeignKey("RenovationTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectService", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.Project", "Project")
                        .WithMany("ProjectServices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RenovationApp.Server.Models.ProjectServiceType", "ProjectServiceType")
                        .WithMany("ProjectServices")
                        .HasForeignKey("ProjectServiceTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("ProjectServiceType");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectServiceInvoice", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.ProjectService", "ProjectService")
                        .WithMany("ProjectServiceInvoices")
                        .HasForeignKey("ProjectServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectService");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectTask", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.RFQImage", b =>
                {
                    b.HasOne("RenovationApp.Server.Models.RFQ", "RFQ")
                        .WithMany("RFQImages")
                        .HasForeignKey("RFQId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RFQ");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.Project", b =>
                {
                    b.Navigation("ClientInvoices");

                    b.Navigation("Comments");

                    b.Navigation("Communications");

                    b.Navigation("Files");

                    b.Navigation("ProjectServices");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectService", b =>
                {
                    b.Navigation("ProjectServiceInvoices");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.ProjectServiceType", b =>
                {
                    b.Navigation("ProjectServices");
                });

            modelBuilder.Entity("RenovationApp.Server.Models.RFQ", b =>
                {
                    b.Navigation("Project");

                    b.Navigation("RFQImages");
                });
#pragma warning restore 612, 618
        }
    }
}